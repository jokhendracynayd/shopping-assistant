[project]
name = "shopping-assistant"
version = "0.1.0"
description = "AI-powered shopping assistant with LangChain/LangGraph and vector search"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "faiss-cpu>=1.12.0",
    "fastapi>=0.116.1",
    "langchain>=0.3.27",
    "langchain-anthropic>=0.3.19",
    "langchain-community>=0.3.27",
    "langchain-groq>=0.3.7",
    "langchain-ollama>=0.3.7",
    "langchain-openai>=0.3.30",
    "langchain-postgres>=0.0.15",
    "langchain-weaviate>=0.0.5",
    "langgraph>=0.6.6",
    "numpy>=2.3.2",
    "pydantic>=2.11.7",
    "pydantic-settings>=2.10.1",
    "python-dotenv>=1.1.1",
    "redis>=6.4.0",
    "uvicorn[standard]>=0.35.0",
    "weaviate-client>=4.16.9",
    "pyyaml>=6.0.0",
]

[project.optional-dependencies]
dev = [
    "black>=24.0.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.24.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

# Black formatting configuration
[tool.black]
line-length = 100
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# Ruff linting configuration
[tool.ruff]
target-version = "py313"
line-length = 100
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "C90",  # mccabe complexity
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "YTT",  # flake8-2020
    "S",    # flake8-bandit
    "BLE",  # flake8-blind-except
    "FBT",  # flake8-boolean-trap
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "EM",   # flake8-errmsg
    "EXE",  # flake8-executable
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PL",   # pylint
    "TRY",  # tryceratops
    "NPY",  # numpy-specific rules
    "RUF",  # ruff-specific rules
]
ignore = [
    "S101",   # assert used
    "S608",   # possible SQL injection (we control the queries)
    "COM812", # missing-trailing-comma (conflicts with black)
    "ISC001", # single-line-implicit-string-concatenation (conflicts with black)
    "PLR0913", # too-many-arguments
    "PLR0915", # too-many-statements
    "TRY003",  # avoid-long-messages-outside-exception-classes
    "EM101",   # raw-string-in-exception
    "EM102",   # f-string-in-exception
    "G004",    # logging-f-string
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
    "S",      # bandit security checks not needed in tests
    "ARG",    # unused arguments common in test fixtures
    "FBT",    # boolean traps ok in tests
    "PLR2004", # magic values ok in tests
]

[tool.ruff.isort]
known-first-party = ["app"]
force-single-line = true

# MyPy type checking configuration
[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "langchain.*",
    "langchain_community.*",
    "langchain_groq.*",
    "langchain_openai.*",
    "langchain_anthropic.*",
    "langchain_weaviate.*",
    "langchain_ollama.*",
    "langgraph.*",
    "weaviate.*",
    "faiss.*",
    "redis.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
]
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["app"]
omit = [
    "tests/*",
    "app/log/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
